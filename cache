Perfect! Let's implement caching specifically for the `currentDate()` method. This is the easiest win since the current date changes infrequently.

## 1. Create Simple Cache Configuration

Create this configuration class:

```java
package uk.org.fca.gabriel.aggregator.administration.config;

import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.concurrent.ConcurrentMapCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableCaching
public class CacheConfig {
    
    @Bean
    public CacheManager cacheManager() {
        return new ConcurrentMapCacheManager("currentDate");
    }
}
```

## 2. Update Your RestService Implementation

Add caching to your `currentDate()` method:

```java
@Override
@Cacheable(value = "currentDate", key = "'current'")
public String currentDate(Map<String, String> headers) {
    String retResponse = null;
    StringBuffer url = new StringBuffer();
    url.append(env.getProperty(protocol)).append(env.getProperty(fdcScsUtility)).append(env.getProperty(suffix));
    UriComponentsBuilder builder = UriComponentsBuilder
            .fromUriString(url.toString())
            .path(fdcScsUtilityCurrentDate);
    ResponseEntity<Object> response = callPlatformService(builder.toUriString(),
            HttpMethod.GET, null, String.class, headers);
    if (null != response) {
        retResponse = (String) response.getBody();
    }
    return retResponse;
}
```

## 3. Add Required Import

Add this import to your service class:

```java
import org.springframework.cache.annotation.Cacheable;
```

## That's it! 

With just these changes:

1. The first call to `currentDate()` will make the actual REST call
2. Subsequent calls within the same application instance will return the cached value
3. The cache will persist until the application restarts

## Optional: Advanced Caching with Expiry

If you want the cache to expire every 5 minutes, you can use Caffeine cache instead:

```java
@Configuration
@EnableCaching
public class CacheConfig {
    
    @Bean
    public CacheManager cacheManager() {
        CaffeineCacheManager cacheManager = new CaffeineCacheManager("currentDate");
        cacheManager.setCaffeine(Caffeine.newBuilder()
            .expireAfterWrite(5, TimeUnit.MINUTES)  // Cache expires after 5 minutes
            .maximumSize(100));
        return cacheManager;
    }
}
```

For this advanced version, you'll need to add Caffeine dependency to your `pom.xml`:

```xml
<dependency>
    <groupId>com.github.ben-manes.caffeine</groupId>
    <artifactId>caffeine</artifactId>
</dependency>
```

## Expected Impact

Just caching `currentDate()` should reduce external service calls by roughly 15-20% (since this method is called in every login), which will provide noticeable CPU reduction.

You can test it works by:
1. Making a login request
2. Checking logs to see the actual REST call to current date service
3. Making another login request immediately
4. Confirming no second REST call is made to the current date service
