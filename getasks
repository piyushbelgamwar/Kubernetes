// PARALLEL API CALLS
CompletableFuture<Map<String, Boolean>> hasDataFuture = CompletableFuture.supplyAsync(() -> 
    firmDataItemIdDataItemDataMap.isEmpty() ? new HashMap<>() : checkFirmDataItemForData(firmDataItemIdDataItemDataMap));

CompletableFuture<Map<Long, DataItemCurrencyUnitResponse>> currencyFuture = CompletableFuture.supplyAsync(() -> 
    retrieveMultipleCurrencyAndCurrencyUnit(new MultipleCurrencyUnitRequest(joinedFirmDataItemIds, String.valueOf(frn))));

CompletableFuture<AuthorisationResponse> authFuture = CompletableFuture.supplyAsync(() -> 
    getCurrentUserAuthForDataItems(new CurrentAuthForDataItemRequest(frn, new ArrayList<>(handbookReferenceSet), userId)));

// GET RESULTS WITH TIMEOUT
Map<String, Boolean> firmDataItemIdHasDataMap;
try {
    firmDataItemIdHasDataMap = hasDataFuture.get(30, TimeUnit.SECONDS);
} catch (Exception e) {
    LOGGER.error("Error getting hasData map", e);
    firmDataItemIdHasDataMap = new HashMap<>();
}

Map<Long, DataItemCurrencyUnitResponse> multipleCurrencyUnitResponse;
try {
    multipleCurrencyUnitResponse = currencyFuture.get(30, TimeUnit.SECONDS);
} catch (Exception e) {
    LOGGER.error("Error getting currency response", e);
    throw new InvalidInputDataException();
}

if (null == multipleCurrencyUnitResponse){ 
    LOGGER.error("multipleCurrencyUnitResponse is null"); 
    throw new InvalidInputDataException(); 
} 

//Get AuthData 
AuthorisationResponse authResponse;
try {
    authResponse = authFuture.get(30, TimeUnit.SECONDS);
} catch (Exception e) {
    LOGGER.error("Error getting auth response", e);
    throw new InvalidInputDataException();
}
