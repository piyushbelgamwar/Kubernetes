Here's how to make your audit methods asynchronous to improve login performance:

## 1. Create Async Configuration (if not already created)

```java
package uk.org.fca.gabriel.aggregator.administration.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.EnableAsync;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.util.concurrent.Executor;
import java.util.concurrent.ThreadPoolExecutor;

@Configuration
@EnableAsync
public class AsyncConfig {
    
    @Bean(name = "auditExecutor")
    public Executor auditExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(5);
        executor.setMaxPoolSize(20);
        executor.setQueueCapacity(100);
        executor.setThreadNamePrefix("Audit-Async-");
        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
        executor.initialize();
        return executor;
    }
}
```

## 2. Create Async Audit Service

```java
package uk.org.fca.gabriel.aggregator.administration.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Arrays;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

@Service
public class AsyncAuditService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncAuditService.class);
    
    @Autowired
    private RestTemplate restTemplate;
    
    @Async("auditExecutor")
    public CompletableFuture<Void> updateAuditRecordAsync(String auditUser, String auditCode, Map<String, String> headersMap) {
        try {
            LOGGER.debug("Async audit logging for user: {}, code: {}", auditUser, auditCode);
            
            SaveAuditDetailsRequest saveAuditDetailsRequest = getAuditRecordRequestForUserAction(auditUser, auditCode);
            updateAuditRecord(restTemplate, saveAuditDetailsRequest, headersMap);
            
            LOGGER.debug("Async audit completed successfully for user: {}", auditUser);
            return CompletableFuture.completedFuture(null);
        } catch (Exception e) {
            LOGGER.error("Error in async audit logging for user: {}, code: {}", auditUser, auditCode, e);
            // Don't propagate the exception - audit failure shouldn't affect login
            return CompletableFuture.completedFuture(null);
        }
    }
    
    @Async("auditExecutor")
    public CompletableFuture<Void> updateAuditRecordWithFirmAsync(String firmName, String auditUser, String auditCode, Map<String, String> headersMap) {
        try {
            LOGGER.debug("Async audit logging for firm: {}, user: {}, code: {}", firmName, auditUser, auditCode);
            
            SaveAuditDetailsRequest saveAuditDetailsRequest = getAuditRecordRequestForUserAction(auditUser, auditCode);
            saveAuditDetailsRequest.getAuditEvent().setAuditType(Constants.FIRM);
            
            if (headersMap.containsKey(Constants.FRN)) {
                saveAuditDetailsRequest.getAuditEvent().setFirmReferenceNo(Integer.valueOf(headersMap.get(Constants.FRN)));
            }
            
            saveAuditDetailsRequest.setExtraValueList(Arrays.asList(new ExtraAuditValues(Constants.FIRM_NAME, firmName)));
            updateAuditRecord(restTemplate, saveAuditDetailsRequest, headersMap);
            
            LOGGER.debug("Async audit with firm completed successfully for user: {}", auditUser);
            return CompletableFuture.completedFuture(null);
        } catch (Exception e) {
            LOGGER.error("Error in async audit logging for firm: {}, user: {}, code: {}", firmName, auditUser, auditCode, e);
            // Don't propagate the exception
            return CompletableFuture.completedFuture(null);
        }
    }
    
    @Async("auditExecutor")
    public CompletableFuture<Void> updateMyfcaAuditAsync(String firmName, String userName, String auditCode, Map<String, String> headersMap) {
        try {
            LOGGER.debug("Async MYFCA audit logging for firm: {}, user: {}", firmName, userName);
            
            updateAuditRecordWithFirmAsync(firmName, userName, auditCode, headersMap);
            
            LOGGER.debug("Async MYFCA audit completed successfully for user: {}", userName);
            return CompletableFuture.completedFuture(null);
        } catch (Exception e) {
            LOGGER.error("Error in async MYFCA audit logging for firm: {}, user: {}", firmName, userName, e);
            return CompletableFuture.completedFuture(null);
        }
    }
    
    // You'll need to move these methods from your current implementation or inject the appropriate service
    private SaveAuditDetailsRequest getAuditRecordRequestForUserAction(String auditUser, String auditCode) {
        // Your existing implementation
    }
    
    private void updateAuditRecord(RestTemplate restTemplate, SaveAuditDetailsRequest saveAuditDetailsRequest, Map<String, String> headersMap) {
        // Your existing implementation
    }
}
```

## 3. Update Your Main Service to Use Async Audit

Modify your `externalUserLogin` method:

```java
@Service
public class AdminServiceImpl implements AdminService {
    
    @Autowired
    private AsyncAuditService asyncAuditService;
    
    @Override
    public AggregatedScheduleResponse externalUserLogin(String emailAddress, String userName_Id, Map<String, String> headersMap) {
        LOGGER.info("externalUserLogin Time Start {}", LocalTime.now());
        AggregatedScheduleResponse response = new AggregatedScheduleResponse();
        String gabUsername = headersMap.get("username");
        
        try {
            User user = restService.userDetails(gabUsername, userName_Id, headersMap);
            UserAuthAndFirmAssociationsResponse firmUserAssociation;
            UserAuthAndFirmAssociationsResponse clonedFirmUserAssociation = new UserAuthAndFirmAssociationsResponse();
            String userName = user.getUsername();
            
            try {
                firmUserAssociation = restService.userAuthAndFirmAssociations(userName, headersMap);
                response.setCurrentDate(restService.currentDate(headersMap));
                firmUserAssociation.setUser(user);
                
                // Async MYFCA audit - non-blocking
                if (FeatureToggle.isFeatureEnabled(MYFCA_AUDIT_REG18018) && headersMap.containsKey(APPNAME) && headersMap.get(APPNAME).equalsIgnoreCase(MYFCA)) {
                    LOGGER.info("AUDIT from MYFCA start --> ");
                    String firmName = null != firmUserAssociation ?
                            firmUserAssociation.getFirms().stream()
                                    .filter(firm -> headersMap.get(FRN).equals(firm.getFrn().toString()))
                                    .map(EnableFirms::getFirmName)
                                    .findFirst()
                                    .orElse("") : org.apache.commons.lang3.StringUtils.EMPTY;
                    
                    // Make MYFCA audit async
                    asyncAuditService.updateMyfcaAuditAsync(firmName, userName, Constants.AUD450_MYFCA, headersMap);
                }
                
                // ... rest of your existing business logic ...
                
                // Process firms logic remains the same
                response.setSingleFirm(firmUserAssociation != null && firmUserAssociation.getFirms() != null && firmUserAssociation.getFirms().size() == 1);
                if (FeatureToggle.isFeatureEnabled(Constants.FIRM_PORTAL_FP_93) && headersMap.containsKey(APPNAME) && headersMap.get(APPNAME).equalsIgnoreCase(MYFCA) && !response.getSingleFirm()) {
                    clonedFirmUserAssociation.setFirms(firmUserAssociation.getFirms());
                    clonedFirmUserAssociation.setUser(user);
                    firmUserAssociation.setFirms(firmUserAssociation.getFilteredFirms(headersMap.get(FRN)));
                    response.setFirmUserAssociation(clonedFirmUserAssociation);
                } else {
                    response.setFirmUserAssociation(firmUserAssociation);
                }
                
            } catch (InvalidInputDataException ex) {
                LOGGER.error("Firms Not Available Exception: {}" + ex.getMessage());
                // Make unsuccessful audit async
                asyncAuditService.updateAuditRecordAsync(userName, Constants.AUD53_INACTIVE_LINK_LOGIN_UNSUCCESSFUL, headersMap);
                throw ex;
            }
            
            if (firmUserAssociation == null || firmUserAssociation.getFirms() == null || firmUserAssociation.getFirms().size() == 0) {
                LOGGER.warn("NO Firms Available for the user : {} ", Utility.whiteList(user));
                // Make unsuccessful audit async
                asyncAuditService.updateAuditRecordAsync(userName, Constants.AUD53_INACTIVE_LINK_LOGIN_UNSUCCESSFUL, headersMap);
                return response;
            }
            
            // ... single firm processing logic remains the same ...
            
            // After successful processing, make successful audit async
            if (response != null && response.getFirmUserAssociation() != null) {
                restService.login(response.getFirmUserAssociation().getUser().getUsername(), headersMap);
                // Make successful audit async - this is the key change!
                asyncAuditService.updateAuditRecordAsync(userName, Constants.AUD46_LOGIN_SUCCESSFUL, headersMap);
            }
            
            return response;
            
        } catch (Exception e) {
            LOGGER.error("Error in externalUserLogin", e);
            // Even error auditing should be async
            if (user != null) {
                asyncAuditService.updateAuditRecordAsync(user.getUsername(), Constants.AUD53_INACTIVE_LINK_LOGIN_UNSUCCESSFUL, headersMap);
            }
            throw e;
        }
    }
}
```

## 4. Optional: Add Audit Metrics

Create a simple metrics collector for audit performance:

```java
@Component
public class AuditMetrics {
    
    private final AtomicLong successfulAudits = new AtomicLong(0);
    private final AtomicLong failedAudits = new AtomicLong(0);
    
    public void incrementSuccessful() {
        successfulAudits.incrementAndGet();
    }
    
    public void incrementFailed() {
        failedAudits.incrementAndGet();
    }
    
    @EventListener
    @Async
    public void handleAuditComplete(AuditEvent event) {
        if (event.isSuccess()) {
            incrementSuccessful();
        } else {
            incrementFailed();
        }
        LOGGER.info("Audit metrics - Successful: {}, Failed: {}", 
                   successfulAudits.get(), failedAudits.get());
    }
}
```

## 5. Key Benefits of Async Audit

### Before (Synchronous):
```
Login Request → Process → Audit (blocks response) → Return Response
Total time: Processing + Audit time
```

### After (Asynchronous):
```
Login Request → Process → Return Response
                     ↓
                Audit (in background)
Total time: Processing time only
```

## 6. Expected Performance Impact

1. **Response Time**: 20-40% faster login responses
2. **CPU Usage**: Lower CPU during peak times (audit processing spread out)
3. **Throughput**: Can handle more concurrent logins
4. **User Experience**: Faster perceived login speed

## 7. Important Notes

1. **Error Handling**: Audit failures won't block login success
2. **Order**: Audits are processed in background, may not be in strict order
3. **Monitoring**: Add logging to track async audit completion
4. **Queue Size**: Monitor the audit queue to prevent memory issues

## 8. Testing

To verify async audit is working:

```java
// Add this test endpoint
@RestController
public class AuditTestController {
    
    @Autowired
    private AsyncAuditService asyncAuditService;
    
    @GetMapping("/test/audit")
    public String testAsyncAudit() {
        long start = System.currentTimeMillis();
        
        // This should return immediately
        asyncAuditService.updateAuditRecordAsync("testUser", "TEST_CODE", new HashMap<>());
        
        long end = System.currentTimeMillis();
        return "Async audit call completed in: " + (end - start) + "ms";
    }
}
```

This implementation will significantly improve your login performance by removing audit logging from the critical path!
