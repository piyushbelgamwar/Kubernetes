/**
 * Converts ScheduleDataItem entities to ScheduleDataItems DTOs and populates
 * additional metadata through efficient batch processing.
 * 
 * @param responseList List of ScheduleDataItem entities from repository
 * @return List of enriched ScheduleDataItems DTOs
 */
private List<ScheduleDataItems> getScheduleResponse(List<ScheduleDataItem> responseList) {
    long startTime = System.currentTimeMillis();
    LOGGER.info("Starting ScheduleResponse processing for {} items", responseList.size());
    
    // Initialize collections
    List<ScheduleDataItems> scheduleDataItemsList = new ArrayList<>();
    List<Long> firmDataItemIdList = new ArrayList<>();
    List<Long> firmDataItemIdListForErrFlag = new ArrayList<>();
    ObjectMapper objectMapper = new ObjectMapper();
    List<Map<String, Object>> firmDataItemIdListForREP = new ArrayList<>();
    List<Map<String, Object>> firmDataItemIdListForREPSubmitted = new ArrayList<>();
    ScheduleDataItems scheduleDataItems;
    
    // Check feature toggle state once
    featureFlagReg9584 = FeatureToggle.isFeatureEnabled(Constants.REG9584);
    
    // STEP 1: Convert database entities to DTOs - KEEP THIS EXACTLY AS ORIGINAL
    LOGGER.debug("Converting database entities to DTOs...");
    for (ScheduleDataItem scheduleDataItem : responseList) {
        scheduleDataItems = new ScheduleDataItems();
        if (scheduleDataItem != null) {
            // Handle AIF002 special case
            if (scheduleDataItem.getHandbookReference() != null && 
                scheduleDataItem.getHandbookReference().equals("AIF002")) {
                scheduleDataItems.setAifManaged(scheduleDataItem.getAifManaged());
                scheduleDataItems.setAifSubmitted(scheduleDataItem.getAifSubmitted());
            }
            
            // Set reporting basis properties
            scheduleDataItems.setReportingBasisId(scheduleDataItem.getReportBasisId());
            scheduleDataItems.setReportingBasisName(scheduleDataItem.getReportingBasisName());
            scheduleDataItems.setReportingBasisDisplayName(scheduleDataItem.getReportingBasisDisplayName());
            scheduleDataItems.setSwitchedSections(scheduleDataItem.getSwitchedSections());
            scheduleDataItems.setAllowGroupReporting(scheduleDataItem.getAllowGroupReporting());
            
            if (scheduleDataItem.getAllowGroupReporting() != null) {
                scheduleDataItems.setAllowGroupReporting(scheduleDataItem.getAllowGroupReporting());
            }
            
            // Set item identifiers
            scheduleDataItems.setFirmDataItemId(scheduleDataItem.getFirmDataItemId());
            
            // Set optional properties
            if (scheduleDataItem.getGroupReportingSupported() != null) {
                scheduleDataItems.setGroupReportingSupported(scheduleDataItem.getGroupReportingSupported());
            }
            
            if (scheduleDataItem.getFileAttachmentName() != null) {
                scheduleDataItems.setFileAttachmentPath(scheduleDataItem.getFileAttachmentName());
            }
            
            if (scheduleDataItem.getFirmDataItemData() != null) {
                scheduleDataItems.setFirmDataItemData(scheduleDataItem.getFirmDataItemData());
            }
            
            if (scheduleDataItem.getLastUpdatedBy() != null) {
                scheduleDataItems.setUpdatedBy(scheduleDataItem.getLastUpdatedBy());
            }
            
            if (scheduleDataItem.getFlowCurrency() != null) {
                scheduleDataItems.setFlowCurrency(scheduleDataItem.getFlowCurrency());
            }
            
            if (scheduleDataItem.getLastUpdatedDate() != null) {
                scheduleDataItems.setUpdatedDateTime(scheduleDataItem.getLastUpdatedDate());
            }
            
            // Set additional fields
            scheduleDataItems.setReportingPeriodStart(scheduleDataItem.getPeriodStartDate());
            scheduleDataItems.setReportingPeriodEnd(scheduleDataItem.getPeriodEndDate());
            scheduleDataItems.setSubmissionDueDate(scheduleDataItem.getSubmissionDueDate());
            scheduleDataItems.setDataItemType(checkDataItemType(scheduleDataItem.getHandbookReference()));
            scheduleDataItems.setScheduleDataItemId(scheduleDataItem.getScheduleId());
            scheduleDataItems.setHandbookReference(scheduleDataItem.getHandbookReference());
            scheduleDataItems.setCopyNumber(scheduleDataItem.getCopyNumber());
            scheduleDataItems.setSubsetStatus(scheduleDataItem.getSubsetStatus());
            scheduleDataItems.setCreatedDate(scheduleDataItem.getCreatedDdate());
            scheduleDataItems.setUpdateDate(scheduleDataItem.getUpdatedDate());
            
            if (scheduleDataItem.getRagName() != null) {
                scheduleDataItems.setRagName(scheduleDataItem.getRagName());
            }
            
            if (scheduleDataItem.getInformationCategoryName() != null) {
                scheduleDataItems.setInformationCategoryName(scheduleDataItem.getInformationCategoryName());
            }
            
            scheduleDataItems.setCompletionStatus(scheduleDataItem.getCompletionStatus());
            scheduleDataItems.setDataItemName(scheduleDataItem.getDataItemName());
            scheduleDataItems.setStatus(scheduleDataItem.getStatus());
            
            if (scheduleDataItem.getSubmittedBy() != null) {
                scheduleDataItems.setSubmittedBy(scheduleDataItem.getSubmittedBy());
            }
            
            if (scheduleDataItem.getSubmittedDate() != null) {
                scheduleDataItems.setSubmittedDate(CommonUtility.convertTimeStampToISODate(scheduleDataItem.getSubmittedDate()));
            }
            
            if (scheduleDataItem.getSubmitOnBehalf() != null) {
                scheduleDataItems.setSubmitOnBehalf(scheduleDataItem.getSubmitOnBehalf());
            }
            
            if (scheduleDataItem.getSubmissionMedthod() != null) {
                scheduleDataItems.setSubmissionMethod(scheduleDataItem.getSubmissionMedthod());
            }
            
            if (scheduleDataItem.getSubmissionReferenceNumber() != null) {
                scheduleDataItems.setSubmissionReferenceNumber(scheduleDataItem.getSubmissionReferenceNumber());
            }
            
            if (scheduleDataItem.getGroupSubmitterFrn() != null) {
                scheduleDataItems.setGroupSubmitterFrn(scheduleDataItem.getGroupSubmitterFrn());
            }
            
            // OPTIMIZATION: Set XBRL and A2C flags with data collection for batch processing 
            if (scheduleDataItem.getHandbookReference() != null) {
                // XBRL detection and flag setting
                boolean isXbrl = uk.org.fca.gabriel.scs.lib.CommonUtility.checkIfXBRL(scheduleDataItems.getHandbookReference());
                scheduleDataItems.setXbrl(isXbrl);
                
                // OPTIMIZATION: Collect IDs for batch processing instead of individual processing
                if (isXbrl) {
                    if (Constants.SUBMITTED.equalsIgnoreCase(scheduleDataItems.getCompletionStatus()) || 
                        Constants.COPY_CREATED.equalsIgnoreCase(scheduleDataItems.getCompletionStatus())) {
                        firmDataItemIdList.add(scheduleDataItems.getFirmDataItemId());
                    }
                    
                    if (!(Constants.NODATA.equalsIgnoreCase(scheduleDataItems.getCompletionStatus()) || 
                          Constants.FAILED_VALIDATION.equalsIgnoreCase(scheduleDataItems.getCompletionStatus()))) {
                        firmDataItemIdListForErrFlag.add(scheduleDataItems.getFirmDataItemId());
                    }
                }
                
                // A2C detection and data collection
                if (scheduleDataItems.getHandbookReference().startsWith("REP026") && featureFlagReg9584) {
                    Map<String, Object> row = new HashMap<>();
                    row.put(Constants.FIRMDATAITEMID, scheduleDataItems.getFirmDataItemId());
                    row.put(Constants.HANDBOOKREFERENCE, scheduleDataItems.getHandbookReference());
                    row.put(Constants.REPORTINGENDDATE, scheduleDataItems.getReportingPeriodEnd());
                    scheduleDataItems.setA2c(true);
                    
                    // Collect based on completion status
                    if (Constants.SUBMITTED.equalsIgnoreCase(scheduleDataItems.getCompletionStatus()) || 
                        Constants.COPY_CREATED.equalsIgnoreCase(scheduleDataItems.getCompletionStatus())) {
                        firmDataItemIdListForREPSubmitted.add(row);
                    } else if (!(Constants.DRAFT.equalsIgnoreCase(scheduleDataItems.getCompletionStatus()) || 
                                Constants.FAILED_VALIDATION.equalsIgnoreCase(scheduleDataItems.getCompletionStatus()) || 
                                Constants.NODATA.equalsIgnoreCase(scheduleDataItems.getCompletionStatus()))) {
                        firmDataItemIdListForREP.add(row);
                    }
                } else {
                    scheduleDataItems.setA2c(false);
                }
            }
            
            // Version information
            if (!StringUtils.isEmpty(scheduleDataItem.getVersion())) {
                scheduleDataItems.setVersion(scheduleDataItem.getVersion());
            }
        }
        scheduleDataItemsList.add(scheduleDataItems);
    }
    
    LOGGER.debug("Entity conversion completed. Processing metadata...");
    
    // OPTIMIZATION: Process metadata with batch calls instead of individual calls
    try {
        // STEP 2: Get all metadata in batch
        LOGGER.debug("Starting batch service calls for metadata");
        
        // OPTIMIZATION: Batch call for filing indicators
        Map<String, String> filingIndicators = Collections.emptyMap();
        if (!firmDataItemIdList.isEmpty()) {
            LOGGER.debug("Fetching filing indicators for {} items", firmDataItemIdList.size());
            long filingStart = System.currentTimeMillis();
            filingIndicators = getFilingIndicators(firmDataItemIdList);
            LOGGER.debug("Filing indicators fetched in {}ms", System.currentTimeMillis() - filingStart);
        }
        
        // OPTIMIZATION: Batch call for error flags
        Map<String, String> xbrlErrorMap = Collections.emptyMap();
        if (!firmDataItemIdListForErrFlag.isEmpty()) {
            LOGGER.debug("Fetching XBRL error flags for {} items", firmDataItemIdListForErrFlag.size());
            long errorFlagStart = System.currentTimeMillis();
            xbrlErrorMap = getXbrlErrorFlag(firmDataItemIdListForErrFlag);
            LOGGER.debug("XBRL error flags fetched in {}ms", System.currentTimeMillis() - errorFlagStart);
        }
        
        // Process A2C items
        Map<String, Map<String, Object>> dataItemDetailsForRep = Collections.emptyMap();
        Map<String, Map<String, Object>> submittedDataItemDetailsForRep = Collections.emptyMap();
        
        if (featureFlagReg9584) {
            // Batch process REP data items
            if (!firmDataItemIdListForREP.isEmpty()) {
                LOGGER.debug("Fetching A2C details for {} regular REP items", firmDataItemIdListForREP.size());
                long repStart = System.currentTimeMillis();
                dataItemDetailsForRep = getDataItemDetails(objectMapper.writeValueAsString(firmDataItemIdListForREP));
                LOGGER.debug("A2C details fetched in {}ms", System.currentTimeMillis() - repStart);
            }
            
            // Batch process submitted REP data items
            if (!firmDataItemIdListForREPSubmitted.isEmpty()) {
                LOGGER.debug("Fetching A2C details for {} submitted REP items", firmDataItemIdListForREPSubmitted.size());
                long repSubmittedStart = System.currentTimeMillis();
                submittedDataItemDetailsForRep = getSubmittedDataItemDetails(objectMapper.writeValueAsString(firmDataItemIdListForREPSubmitted));
                LOGGER.debug("A2C submitted details fetched in {}ms", System.currentTimeMillis() - repSubmittedStart);
            }
        }
        
        // STEP 3: Apply all metadata in one pass
        LOGGER.debug("Applying metadata to items");
        int filingIndicatorsApplied = 0;
        int errorFlagsApplied = 0;
        int a2cWarningsApplied = 0;
        
        for (ScheduleDataItems item : scheduleDataItemsList) {
            String itemId = String.valueOf(item.getFirmDataItemId());
            
            // Apply filing indicators if applicable
            if (item.getXbrl() && filingIndicators != null && !filingIndicators.isEmpty() &&
                (Constants.SUBMITTED.equalsIgnoreCase(item.getCompletionStatus()) || 
                 Constants.COPY_CREATED.equalsIgnoreCase(item.getCompletionStatus())) &&
                filingIndicators.containsKey(itemId)) {
                
                item.setFilingIndicators(filingIndicators.get(itemId));
                filingIndicatorsApplied++;
            }
            
            // Apply error flags if applicable
            if (item.getXbrl() && xbrlErrorMap != null && !xbrlErrorMap.isEmpty() &&
                !(Constants.NODATA.equalsIgnoreCase(item.getCompletionStatus()) || 
                 Constants.FAILED_VALIDATION.equalsIgnoreCase(item.getCompletionStatus())) &&
                xbrlErrorMap.containsKey(itemId)) {
                
                item.setXbrlErrorFlag(xbrlErrorMap.get(itemId));
                errorFlagsApplied++;
            }
            
            // Apply A2C error flags if applicable
            if (item.getA2c() && featureFlagReg9584) {
                // For submitted items
                if ((Constants.SUBMITTED.equalsIgnoreCase(item.getCompletionStatus()) || 
                     Constants.COPY_CREATED.equalsIgnoreCase(item.getCompletionStatus())) && 
                     submittedDataItemDetailsForRep != null && 
                     !submittedDataItemDetailsForRep.isEmpty() && 
                     submittedDataItemDetailsForRep.get(itemId) != null && 
                     !submittedDataItemDetailsForRep.get(itemId).get(Constants.VALIDATION_WARNINGS).equals(0)) {
                    
                    item.setA2cErrorFlag(Constants.WARNING);
                    a2cWarningsApplied++;
                } 
                // For other items
                else if (dataItemDetailsForRep != null && 
                         !dataItemDetailsForRep.isEmpty() && 
                         dataItemDetailsForRep.get(itemId) != null && 
                         !dataItemDetailsForRep.get(itemId).get(Constants.VALIDATION_WARNINGS).equals(0) && 
                         !(Constants.NODATA.equalsIgnoreCase(item.getCompletionStatus()) || 
                           Constants.FAILED_VALIDATION.equalsIgnoreCase(item.getCompletionStatus()) || 
                           Constants.DRAFT.equalsIgnoreCase(item.getCompletionStatus()))) {
                    
                    item.setA2cErrorFlag(Constants.WARNING);
                    a2cWarningsApplied++;
                }
            }
        }
        
        LOGGER.debug("Applied {} filing indicators, {} error flags, and {} A2C warnings", 
            filingIndicatorsApplied, errorFlagsApplied, a2cWarningsApplied);
        
    } catch (Exception e) {
        LOGGER.error("Exception occurred processing metadata: {}", e.getMessage(), e);
    }
    
    long duration = System.currentTimeMillis() - startTime;
    LOGGER.info("Schedule response processing completed for {} items in {}ms", 
        scheduleDataItemsList.size(), duration);
    
    return scheduleDataItemsList;
}
